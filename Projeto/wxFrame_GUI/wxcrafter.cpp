//////////////////////////////////////////////////////////////////////
// This file was auto-generated by codelite's wxCrafter Plugin
// wxCrafter project file: wxcrafter.wxcp
// Do not modify this file by hand!
//////////////////////////////////////////////////////////////////////

#include "wxcrafter.h"

// Declare the bitmap loading function
extern void wxC9ED9InitBitmapResources();

static bool bBitmapLoaded = false;

MainFrameBaseClass::MainFrameBaseClass(wxWindow* parent,
    wxWindowID id,
    const wxString& title,
    const wxPoint& pos,
    const wxSize& size,
    long style)
    : wxFrame(parent, id, title, pos, size, style)
{
    if(!bBitmapLoaded) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC9ED9InitBitmapResources();
        bBitmapLoaded = true;
    }

    wxBoxSizer* boxSizer1 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizer1);

    m_mainPanel = new wxPanel(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), wxTAB_TRAVERSAL);

    boxSizer1->Add(m_mainPanel, 1, wxEXPAND, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizer11 = new wxBoxSizer(wxHORIZONTAL);
    m_mainPanel->SetSizer(boxSizer11);

    wxBoxSizer* boxSizer15 = new wxBoxSizer(wxHORIZONTAL);

    boxSizer11->Add(boxSizer15, 1, wxALL | wxEXPAND | wxALIGN_CENTER_HORIZONTAL, WXC_FROM_DIP(5));

    wxArrayString m_pgDadosArr;
    wxUnusedVar(m_pgDadosArr);
    wxArrayInt m_pgDadosIntArr;
    wxUnusedVar(m_pgDadosIntArr);
    m_pgDados = new wxPropertyGridManager(m_mainPanel, wxID_ANY, wxDefaultPosition,
        wxDLG_UNIT(m_mainPanel, wxSize(-1, -1)), wxPG_DESCRIPTION | wxPG_SPLITTER_AUTO_CENTER | wxPG_BOLD_MODIFIED);

    boxSizer15->Add(m_pgDados, 1, wxALL | wxEXPAND, WXC_FROM_DIP(5));

    m_pgDadosArr.Clear();
    m_pgDadosIntArr.Clear();
    m_pgDadosArr.Add(_("Selecione o tipo"));
    m_pgDadosArr.Add(_("Rele 50/51"));
    m_pgDadosArr.Add(_("Rele 50/51 TD"));
    m_pgDadosArr.Add(_("ANSI"));
    m_pgDadosArr.Add(_("INRUSH"));
    m_pgDadosArr.Add(_("Carga"));
    m_pgDadosArr.Add(_("ICC"));
    m_pgTipo = m_pgDados->Append(new wxEnumProperty(_("Tipo"), wxPG_LABEL, m_pgDadosArr, m_pgDadosIntArr, 0));
    m_pgTipo->SetHelpString(_("Tipo de elemento a ser acrescentado no coordenograma."));
    m_pgTipo->SetEditor(wxT("Choice"));

    m_pgCorrente = m_pgDados->Append(new wxFloatProperty(_("Corrente"), wxPG_LABEL, 0));
    m_pgCorrente->SetHelpString(wxT(""));
    m_pgCorrente->SetEditor(wxT("TextCtrl"));

    m_pgTempo = m_pgDados->Append(new wxFloatProperty(_("Tempo"), wxPG_LABEL, 0));
    m_pgTempo->SetHelpString(wxT(""));

    m_pgIATF = m_pgDados->Append(new wxFloatProperty(_("Iatf"), wxPG_LABEL, 0));
    m_pgIATF->SetHelpString(wxT(""));

    m_pgIAIF = m_pgDados->Append(new wxFloatProperty(_("Iaif"), wxPG_LABEL, 0));
    m_pgIAIF->SetHelpString(wxT(""));

    m_pgF = m_pgDados->Append(new wxFloatProperty(_("F"), wxPG_LABEL, 0));
    m_pgF->SetHelpString(wxT(""));

    m_pgDadosArr.Clear();
    m_pgDadosIntArr.Clear();
    m_pgDadosArr.Add(_("Tipo de curva"));
    m_pgDadosArr.Add(_("Curva Normalmente Inversa"));
    m_pgDadosArr.Add(_("Curva Muito Inversa"));
    m_pgDadosArr.Add(_("Curva Extremamente Inversa"));
    m_pgDadosArr.Add(_("Curva Inversa Longa"));
    m_pgDadosArr.Add(_("Curva Inversa Curta"));
    m_pgDadosArr.Add(_("Curva Termica IXT"));
    m_pgDadosArr.Add(_("Curva Termica I²XT"));
    m_pgTipoCurva =
        m_pgDados->Append(new wxEnumProperty(_("Tipo de Curva"), wxPG_LABEL, m_pgDadosArr, m_pgDadosIntArr, 0));
    m_pgTipoCurva->SetHelpString(_("Tipo de curva do Relé 51."));
    m_pgTipoCurva->SetEditor(wxT("Choice"));

    wxBoxSizer* boxSizer13 = new wxBoxSizer(wxHORIZONTAL);

    boxSizer11->Add(boxSizer13, 0, wxALL | wxEXPAND | wxALIGN_CENTER_HORIZONTAL, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizer63 = new wxBoxSizer(wxVERTICAL);

    boxSizer13->Add(boxSizer63, 1, wxALL | wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));

    wxBoxSizer* boxSizer83 = new wxBoxSizer(wxVERTICAL);

    boxSizer63->Add(boxSizer83, 0, wxLEFT | wxRIGHT | wxALIGN_CENTER_HORIZONTAL, WXC_FROM_DIP(5));

    m_button35 = new wxButton(
        m_mainPanel, wxID_ANY, _("Adicionar"), wxDefaultPosition, wxDLG_UNIT(m_mainPanel, wxSize(-1, -1)), 0);

    boxSizer83->Add(m_button35, 0, wxLEFT | wxRIGHT | wxALIGN_CENTER_HORIZONTAL, WXC_FROM_DIP(5));

    m_button51 = new wxButton(
        m_mainPanel, wxID_ANY, _("Coordenograma"), wxDefaultPosition, wxDLG_UNIT(m_mainPanel, wxSize(-1, -1)), 0);

    boxSizer83->Add(m_button51, 0, wxLEFT | wxRIGHT | wxALIGN_CENTER_HORIZONTAL, WXC_FROM_DIP(5));

    SetName(wxT("MainFrameBaseClass"));
    SetSize(wxDLG_UNIT(this, wxSize(500, 300)));
    if(GetSizer()) {
        GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    m_pgDados->Connect(wxEVT_PG_CHANGED, wxPropertyGridEventHandler(MainFrameBaseClass::onPGChange), NULL, this);
    m_button35->Connect(
        wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBaseClass::btnClickAdicionar), NULL, this);
    m_button51->Connect(
        wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBaseClass::btnClickCoordenograma), NULL, this);
}

MainFrameBaseClass::~MainFrameBaseClass()
{
    m_pgDados->Disconnect(wxEVT_PG_CHANGED, wxPropertyGridEventHandler(MainFrameBaseClass::onPGChange), NULL, this);
    m_button35->Disconnect(
        wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBaseClass::btnClickAdicionar), NULL, this);
    m_button51->Disconnect(
        wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MainFrameBaseClass::btnClickCoordenograma), NULL, this);
}
